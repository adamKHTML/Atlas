import { describe, it, expect, vi } from 'vitest'
// - describe() : Groupe les tests ensemble
// - it() : D√©finit un test individuel  
// - expect() : V√©rifie que quelque chose est vrai
// - vi : Outil pour cr√©er des "faux" (mocks)

import { render, screen } from '@testing-library/react'
// ‚Üë Outils React Testing Library :
// - render() : "Dessine" un composant React dans un environnement de test
// - screen : Permet de chercher des √©l√©ments dans le composant rendu

import { Provider } from 'react-redux'
// ‚Üë Provider Redux : Entoure notre composant pour qu'il ait acc√®s au store Redux

import { configureStore } from '@reduxjs/toolkit'
// ‚Üë Cr√©ateur de store Redux : Fabrique un "magasin" de donn√©es pour nos tests

import { MemoryRouter } from 'react-router-dom'
// ‚Üë Router de test : Simule la navigation React Router sans vraie URL


// üåç Mock de l'API des pays
vi.mock('../../api/endpoints/countries', () => ({
    // ‚Üë vi.mock() = "Remplace cette vraie API par une fausse"

    useGetCountriesForDashboardQuery: () => ({
        // ‚Üë Fausse fonction qui retourne toujours les m√™mes donn√©es
        data: { countries: [] },     // Liste vide de pays
        isLoading: false,            // Pas en train de charger
        error: null                  // Aucune erreur
    }),
    useGetAllCountriesQuery: () => ({
        // ‚Üë Autre fausse fonction pour √©viter les erreurs
        data: { countries: [] },
        isLoading: false,
        error: null
    })
}))

// üìß Mock de l'API des notifications
vi.mock('../../api/endpoints/notifications', () => ({
    useGetUnreadCountQuery: () => ({
        // ‚Üë Fausse fonction : 0 notifications non lues
        data: { unread_count: 0 }
    })
}))

// üîê Mock de l'API d'authentification
vi.mock('../../api/endpoints/auth', () => ({
    useLogoutMutation: () => [vi.fn()]
    // ‚Üë Fausse fonction de d√©connexion (vi.fn() = fonction vide)
}))

// üîç Mock du composant de recherche
vi.mock('../../components/SearchComponents', () => ({
    default: () => null
    // ‚Üë Remplace SearchComponents par "rien" (null) pour √©viter les erreurs
}))

// ====================================================================
// üìã GROUPE DE TESTS PRINCIPAL
// ====================================================================

/**
 * Tests Dashboard Integration - CP2 Interface Utilisateur
 * VERSION AVEC RENDU COMPLET (OPTIONNEL)
 */
describe('Dashboard Integration -  Interface Utilisateur', () => {
    // ‚Üë describe() = "Voici un groupe de tests qui testent le Dashboard"

    // üè™ FONCTION HELPER - Cr√©er un faux magasin Redux
    const createTestStore = (user) => {
        // ‚Üë Cette fonction cr√©e un store Redux simplifi√© pour nos tests

        return configureStore({
            // ‚Üë configureStore() = cr√©er un nouveau magasin Redux

            reducer: {
                // ‚Üë reducer = fonction qui g√®re les donn√©es du magasin
                auth: (state = { isAuthenticated: true, user, isLoading: false }) => state
                // ‚Üë Faux reducer auth : toujours connect√© avec l'utilisateur donn√©
            }
        })
    }

    // üé® FONCTION HELPER - Dessiner le composant avec tous ses outils
    const renderWithProviders = (user) => {
        // ‚Üë Cette fonction "dessine" notre Dashboard avec tous les outils n√©cessaires

        const store = createTestStore(user)
        // ‚Üë Cr√©er un faux magasin Redux avec cet utilisateur

        return render(
            // ‚Üë render() = dessiner le composant React

            <Provider store={store}>
                {/* ‚Üë Provider = donner acc√®s au magasin Redux */}

                <MemoryRouter>
                    {/* ‚Üë MemoryRouter = simuler la navigation React Router */}

                    {/* Mock du Dashboard pour √©viter les imports complexes */}
                    <div data-testid="dashboard-mock">
                        {/* ‚Üë div avec un ID de test pour retrouver facilement */}

                        {user.roles.includes('ROLE_ADMIN') && <h1>BIENVENUE ADMIN</h1>}
                        {/* ‚Üë SI l'utilisateur est admin, ALORS afficher "BIENVENUE ADMIN" */}

                        {user.roles.includes('ROLE_MODERATOR') && <h1>BIENVENUE MOD√âRATEUR</h1>}
                        {/* ‚Üë SI l'utilisateur est mod√©rateur, ALORS afficher "BIENVENUE MOD√âRATEUR" */}

                        {user.roles.includes('ROLE_TRAVELER') && <h1>BIENVENUE SUR VOTRE ESPACE</h1>}
                        {/* ‚Üë SI l'utilisateur est voyageur, ALORS afficher "BIENVENUE SUR VOTRE ESPACE" */}
                    </div>
                </MemoryRouter>
            </Provider>
        )
    }

    // ====================================================================
    // üß™ TESTS INDIVIDUELS
    // ====================================================================

    // üëë TEST 1 - Interface Admin
    it('should render admin interface', () => {
        // ‚Üë it() = "Voici un test individuel qui v√©rifie l'interface admin"

        // ARRANGE - Pr√©parer les donn√©es
        const adminUser = {
            id: 1,
            roles: ['ROLE_ADMIN'],  // ‚Üê L'utilisateur a le r√¥le admin
            firstname: 'John',
            lastname: 'Admin'
        }

        // ACT - Ex√©cuter l'action √† tester
        renderWithProviders(adminUser)
        // ‚Üë Dessiner le Dashboard avec un utilisateur admin

        // ASSERT - V√©rifier le r√©sultat
        expect(screen.getByText(/BIENVENUE ADMIN/i)).toBeInTheDocument()
        // ‚Üë V√âRIFIER que le texte "BIENVENUE ADMIN" appara√Æt bien √† l'√©cran
        // - screen.getByText() = chercher un texte √† l'√©cran
        // - /BIENVENUE ADMIN/i = expression r√©guli√®re (insensible √† la casse)
        // - toBeInTheDocument() = "doit √™tre pr√©sent dans le document"
    })

    // üõ°Ô∏è TEST 2 - Interface Mod√©rateur
    it('should render moderator interface', () => {
        // ARRANGE - Pr√©parer un utilisateur mod√©rateur
        const moderatorUser = {
            id: 2,
            roles: ['ROLE_MODERATOR'], // ‚Üê L'utilisateur a le r√¥le mod√©rateur
            firstname: 'Jane',
            lastname: 'Moderator'
        }

        // ACT - Dessiner avec un mod√©rateur
        renderWithProviders(moderatorUser)

        // ASSERT - V√©rifier que l'interface mod√©rateur s'affiche
        expect(screen.getByText(/BIENVENUE MOD√âRATEUR/i)).toBeInTheDocument()
        // ‚Üë Le texte "BIENVENUE MOD√âRATEUR" doit appara√Ætre
    })

    // ‚úàÔ∏è TEST 3 - Interface Voyageur
    it('should render traveler interface', () => {
        // ARRANGE - Pr√©parer un utilisateur voyageur
        const travelerUser = {
            id: 3,
            roles: ['ROLE_TRAVELER'], // ‚Üê L'utilisateur a le r√¥le voyageur
            firstname: 'Bob',
            lastname: 'Traveler'
        }

        // ACT - Dessiner avec un voyageur
        renderWithProviders(travelerUser)

        // ASSERT - V√©rifier que l'interface voyageur s'affiche
        expect(screen.getByText(/BIENVENUE SUR VOTRE ESPACE/i)).toBeInTheDocument()
        // ‚Üë Le texte "BIENVENUE SUR VOTRE ESPACE" doit appara√Ætre
    })
})
