pipeline {
    agent any
    
    stages {
        stage("Checkout") {
            steps {
                git branch: "main", url: "https://github.com/adamKHTML/Atlas"
            }
        }
        
        stage("Continuous Integration") {
            steps {
                sh "composer self-update"
                sh "composer install --no-interaction"
                sh "composer validate --no-check-publish"
                sh "php bin/phpunit" 
            }
        }
        
       stage("Continuous Delivery") {
            steps {
                sh "docker build -t ${DOCKERHUB_USERNAME}/atlasymfony-deployment ."
                sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                sh "docker push ${DOCKERHUB_USERNAME}/atlasymfony-deployment"
            }
        }
        
        
        stage("Continuous Deployment") {
            steps {
                sh '''
                    echo " D√©but du d√©ploiement Atlas Backend..."
                    
                    # Arr√™t des containers
                    docker-compose down || true
                    
                    # Pull des nouvelles images
                    echo "Pull des images..."
                    docker pull argentikk/atlasymfony-deployment:latest
                    docker pull argentikk/atlasreact-deployment:latest
                    docker pull mysql:8.0
                    
                    # D√©marrage des services
                    echo "D√©marrage des containers..."
                    docker-compose up -d
                    
                    # Attente d√©marrage MySQL et containers
                    echo " Attente d√©marrage des services..."
                    sleep 45
                    
                    # Mise √† jour Composer dans le container
                    echo " Mise √† jour des d√©pendances..."
                    docker exec atlas_symfony_backend_container composer self-update
                    docker exec atlas_symfony_backend_container composer install --no-interaction --optimize-autoloader --no-dev
                    
                    # G√©n√©ration des cl√©s JWT 
                    echo " G√©n√©ration des cl√©s JWT..."
                    docker exec atlas_symfony_backend_container php bin/console lexik:jwt:generate-keypair --env=prod --skip-if-exists
                    
                    # Configuration de la base de donn√©es
                    echo " Configuration base de donn√©es..."
                    docker exec atlas_symfony_backend_container php bin/console doctrine:database:create --if-not-exists --env=prod
                    docker exec atlas_symfony_backend_container php bin/console doctrine:migrations:migrate --no-interaction --env=prod
                    
                    # Chargement des fixtures (optionnel en prod)
                    echo " Chargement des donn√©es..."
                    docker exec atlas_symfony_backend_container php bin/console doctrine:fixtures:load --no-interaction --append --env=prod || echo "Pas de fixtures"
                    
                    # Cr√©ation des dossiers uploads avec permissions
                    echo "  Configuration des dossiers uploads..."
                    docker exec atlas_symfony_backend_container mkdir -p public/uploads/{avatars,countries,messages,forums,sections}
                    docker exec atlas_symfony_backend_container chown -R www-data:www-data public/uploads/
                    docker exec atlas_symfony_backend_container chmod -R 755 public/uploads/
                    
                    # Nettoyage du cache
                    echo "Nettoyage du cache..."
                    docker exec atlas_symfony_backend_container php bin/console cache:clear --env=prod
                    docker exec atlas_symfony_backend_container php bin/console cache:warmup --env=prod
                    
                    echo " Backend Atlas d√©ploy√© avec succ√®s sur http://180.149.199.211:8092"
                '''
            }
        }
    }
    
    post {
        success {
            echo "üéâ D√©ploiement backend r√©ussi !"
        }
        failure {
            echo "‚ùå √âchec du d√©ploiement backend"
        }
    }
}